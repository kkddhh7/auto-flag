{"ast":null,"code":"var _jsxFileName = \"/Users/kkddhh/Desktop/project/auto_flag/auto-flag-front/src/pages/Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { OpenAI } from 'openai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Register() {\n  _s();\n  const [image, setImage] = useState(null);\n  const [preview, setPreview] = useState(null);\n  const [address, setAddress] = useState('');\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n  const [memo, setMemo] = useState('');\n  const GOOGLE_CLOUD_VISION_API_KEY = 'AIzaSyA2bEOpkNhnfSIsYqVgFD0PNcRF6jFooAE';\n  const GOOGLE_CLOUD_GEOCODING_API_KEY = 'AIzaSyCLg__BpwjAl8zSJ741LouSvrwuUe__J-Q';\n  const OPENAI_API_KEY = 'sk-proj-E3Rg6aQ4UIxJuK71NePhT3BlbkFJOsIE4iNCTTXO5A3EpYrb';\n  const openai = new OpenAI({\n    apiKey: OPENAI_API_KEY,\n    dangerouslyAllowBrowser: true\n  });\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_CLOUD_GEOCODING_API_KEY}`;\n    script.async = true;\n    document.body.appendChild(script);\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, []);\n  useEffect(() => {\n    if (address) {\n      const geocoder = new window.google.maps.Geocoder();\n      geocoder.geocode({\n        address\n      }, (results, status) => {\n        if (status === 'OK') {\n          const {\n            lat,\n            lng\n          } = results[0].geometry.location;\n          setLatitude(lat().toString());\n          setLongitude(lng().toString());\n        } else {\n          console.error('Geocode was not successful for the following reason: ' + status);\n        }\n      });\n    }\n  }, [address]);\n  const handleImageChange = async e => {\n    const file = e.target.files[0];\n    setImage(file);\n    setPreview(URL.createObjectURL(file));\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onloadend = async () => {\n      const base64String = reader.result.split(',')[1];\n      const requestPayload = {\n        requests: [{\n          image: {\n            content: base64String\n          },\n          features: [{\n            type: 'TEXT_DETECTION'\n          }]\n        }]\n      };\n      try {\n        const response = await axios.post(`https://vision.googleapis.com/v1/images:annotate?key=${GOOGLE_CLOUD_VISION_API_KEY}`, requestPayload, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.data.responses[0].textAnnotations) {\n          const detections = response.data.responses[0].textAnnotations;\n          const detectedText = detections[0] ? detections[0].description : 'No text detected';\n          const cleanedText = detectedText.replace(/\\n/g, ' ');\n          const extractedAddress = await extractAddress(cleanedText);\n          setAddress(extractedAddress);\n        } else {\n          console.error('No text annotations found');\n        }\n      } catch (error) {\n        console.error('Failed to fetch text from image', error);\n      }\n    };\n  };\n  const extractAddress = async text => {\n    let modifiedText = text.replace(/(?:시|도|군|구|로|길|대로|층)(?!\\s)/g, '$& ');\n    try {\n      const gptResponse = await openai.chat.completions.create({\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'system',\n          content: '텍스트가 주어질 것이다. 거기서 주소만을 한글로 출력하라.'\n        }, {\n          role: 'user',\n          content: modifiedText\n        }]\n      });\n      const extractedAddress = gptResponse.choices[0].message.content.trim();\n      return extractedAddress;\n    } catch (error) {\n      console.error('Failed to extract address using GPT', error);\n      return 'Address not found';\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log('Image:', image);\n    console.log('Address:', address);\n    console.log('Latitude:', latitude);\n    console.log('Longitude:', longitude);\n    console.log('Memo:', memo);\n  };\n  const handleReset = () => {\n    setImage(null);\n    setPreview(null);\n    setAddress('');\n    setLatitude('');\n    setLongitude('');\n    setMemo('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Image:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleImageChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), preview && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: preview,\n          alt: \"Preview\",\n          style: {\n            maxWidth: '200px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"address\",\n          value: address,\n          onChange: e => setAddress(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Latitude:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: latitude,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Longitude:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: longitude,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Memo:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: memo,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n}\n_s(Register, \"Vik3iOpFGYq1KWzKgKOFXaoKD08=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","useEffect","axios","OpenAI","jsxDEV","_jsxDEV","Register","_s","image","setImage","preview","setPreview","address","setAddress","latitude","setLatitude","longitude","setLongitude","memo","setMemo","GOOGLE_CLOUD_VISION_API_KEY","GOOGLE_CLOUD_GEOCODING_API_KEY","OPENAI_API_KEY","openai","apiKey","dangerouslyAllowBrowser","script","document","createElement","src","async","body","appendChild","removeChild","geocoder","window","google","maps","Geocoder","geocode","results","status","lat","lng","geometry","location","toString","console","error","handleImageChange","e","file","target","files","URL","createObjectURL","reader","FileReader","readAsDataURL","onloadend","base64String","result","split","requestPayload","requests","content","features","type","response","post","headers","data","responses","textAnnotations","detections","detectedText","description","cleanedText","replace","extractedAddress","extractAddress","text","modifiedText","gptResponse","chat","completions","create","model","messages","role","choices","message","trim","handleSubmit","event","preventDefault","log","handleReset","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","alt","style","maxWidth","id","value","readOnly","onClick","_c","$RefreshReg$"],"sources":["/Users/kkddhh/Desktop/project/auto_flag/auto-flag-front/src/pages/Register.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { OpenAI } from 'openai';\n\nfunction Register() {\n    const [image, setImage] = useState(null);\n    const [preview, setPreview] = useState(null);\n    const [address, setAddress] = useState('');\n    const [latitude, setLatitude] = useState('');\n    const [longitude, setLongitude] = useState('');\n    const [memo, setMemo] = useState('');\n\n    const GOOGLE_CLOUD_VISION_API_KEY = 'AIzaSyA2bEOpkNhnfSIsYqVgFD0PNcRF6jFooAE'\n    const GOOGLE_CLOUD_GEOCODING_API_KEY = 'AIzaSyCLg__BpwjAl8zSJ741LouSvrwuUe__J-Q'\n    const OPENAI_API_KEY = 'sk-proj-E3Rg6aQ4UIxJuK71NePhT3BlbkFJOsIE4iNCTTXO5A3EpYrb'\n\n    const openai = new OpenAI({\n        apiKey: OPENAI_API_KEY,\n        dangerouslyAllowBrowser: true,\n    });\n\n    useEffect(() => {\n        const script = document.createElement('script');\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_CLOUD_GEOCODING_API_KEY}`;\n        script.async = true;\n        document.body.appendChild(script);\n\n        return () => {\n            document.body.removeChild(script);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (address) {\n            const geocoder = new window.google.maps.Geocoder();\n            geocoder.geocode({ address }, (results, status) => {\n                if (status === 'OK') {\n                    const { lat, lng } = results[0].geometry.location;\n                    setLatitude(lat().toString());\n                    setLongitude(lng().toString());\n                } else {\n                    console.error('Geocode was not successful for the following reason: ' + status);\n                }\n            });\n        }\n    }, [address]);\n\n    const handleImageChange = async (e) => {\n        const file = e.target.files[0];\n        setImage(file);\n        setPreview(URL.createObjectURL(file));\n\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onloadend = async () => {\n            const base64String = reader.result.split(',')[1];\n\n            const requestPayload = {\n                requests: [\n                    {\n                        image: {\n                            content: base64String,\n                        },\n                        features: [\n                            {\n                                type: 'TEXT_DETECTION',\n                            },\n                        ],\n                    },\n                ],\n            };\n\n            try {\n                const response = await axios.post(\n                    `https://vision.googleapis.com/v1/images:annotate?key=${GOOGLE_CLOUD_VISION_API_KEY}`,\n                    requestPayload,\n                    {\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                    }\n                );\n\n                if (response.data.responses[0].textAnnotations) {\n                    const detections = response.data.responses[0].textAnnotations;\n                    const detectedText = detections[0] ? detections[0].description : 'No text detected';\n                    const cleanedText = detectedText.replace(/\\n/g, ' ');\n                    const extractedAddress = await extractAddress(cleanedText);\n                    setAddress(extractedAddress);\n                } else {\n                    console.error('No text annotations found');\n                }\n            } catch (error) {\n                console.error('Failed to fetch text from image', error);\n            }\n        };\n    };\n\n    const extractAddress = async (text) => {\n        let modifiedText = text.replace(/(?:시|도|군|구|로|길|대로|층)(?!\\s)/g, '$& ');\n\n        try {\n            const gptResponse = await openai.chat.completions.create({\n                model: 'gpt-3.5-turbo',\n                messages: [\n                    {\n                        role: 'system',\n                        content: '텍스트가 주어질 것이다. 거기서 주소만을 한글로 출력하라.',\n                    },\n                    {\n                        role: 'user',\n                        content: modifiedText,\n                    },\n                ],\n            });\n\n            const extractedAddress = gptResponse.choices[0].message.content.trim();\n            return extractedAddress;\n        } catch (error) {\n            console.error('Failed to extract address using GPT', error);\n            return 'Address not found';\n        }\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log('Image:', image);\n        console.log('Address:', address);\n        console.log('Latitude:', latitude);\n        console.log('Longitude:', longitude);\n        console.log('Memo:', memo);\n    };\n\n    const handleReset = () => {\n        setImage(null);\n        setPreview(null);\n        setAddress('');\n        setLatitude('');\n        setLongitude('');\n        setMemo('');\n    };\n\n    return (\n        <div>\n            <h1>Register</h1>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Image:\n                    <input type=\"file\" onChange={handleImageChange} />\n                </label>\n                <br />\n                {preview && (\n                    <div>\n                        <img src={preview} alt=\"Preview\" style={{ maxWidth: '200px' }} />\n                    </div>\n                )}\n                <label>\n                    Address:\n                    <input type=\"text\" id=\"address\" value={address} onChange={(e) => setAddress(e.target.value)} />\n                </label>\n                <br />\n                <label>\n                    Latitude:\n                    <input type=\"text\" value={latitude} readOnly />\n                </label>\n                <br />\n                <label>\n                    Longitude:\n                    <input type=\"text\" value={longitude} readOnly />\n                </label>\n                <br />\n                <label>\n                    Memo:\n                    <input type=\"text\" value={memo} readOnly />\n                </label>\n                <br />\n                <button type=\"submit\">Submit</button>\n                <button type=\"button\" onClick={handleReset}>Reset</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Register;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}