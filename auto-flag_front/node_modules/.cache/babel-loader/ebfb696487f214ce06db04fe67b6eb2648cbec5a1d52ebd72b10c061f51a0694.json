{"ast":null,"code":"var _jsxFileName = \"/Users/kkddhh/Desktop/project/auto_flag/auto-flag-front/src/pages/Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Register() {\n  _s();\n  const [image, setImage] = useState(null);\n  const [preview, setPreview] = useState(null);\n  const [name, setName] = useState('');\n  const [address, setAddress] = useState('');\n  const [latitude, setLatitude] = useState('');\n  const [longitude, setLongitude] = useState('');\n  const [memo, setMemo] = useState('');\n  const GOOGLE_CLOUD_VISION_API_KEY = 'AIzaSyA2bEOpkNhnfSIsYqVgFD0PNcRF6jFooAE';\n  const GOOGLE_CLOUD_GEOCODING_API_KEY = 'AIzaSyCLg__BpwjAl8zSJ741LouSvrwuUe__J-Q';\n  useEffect(() => {\n    const script = document.createElement('script');\n    script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_CLOUD_GEOCODING_API_KEY}`;\n    script.async = true;\n    document.body.appendChild(script);\n    script.onload = () => {\n      const geocoder = new window.google.maps.Geocoder();\n      const addressInput = document.getElementById('address');\n      addressInput.addEventListener('change', () => {\n        geocoder.geocode({\n          address: addressInput.value\n        }, (results, status) => {\n          if (status === 'OK') {\n            const {\n              lat,\n              lng\n            } = results[0].geometry.location;\n            setLatitude(lat().toString());\n            setLongitude(lng().toString());\n          } else {\n            console.error('Geocode was not successful for the following reason: ' + status);\n          }\n        });\n      });\n    };\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, []);\n  const handleImageChange = async e => {\n    const file = e.target.files[0];\n    setImage(file);\n    setPreview(URL.createObjectURL(file));\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onloadend = async () => {\n      const base64String = reader.result.split(',')[1];\n      const requestPayload = {\n        requests: [{\n          image: {\n            content: base64String\n          },\n          features: [{\n            type: 'TEXT_DETECTION'\n          }]\n        }]\n      };\n      try {\n        const response = await axios.post(`https://vision.googleapis.com/v1/images:annotate?key=${GOOGLE_CLOUD_VISION_API_KEY}`, requestPayload, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.data.responses[0].textAnnotations) {\n          const detections = response.data.responses[0].textAnnotations;\n          //const detectedText = detections[0] ? detections[0].description : 'No text detected';\n          const detectedText = detections.map(annotation => annotation.description).join('/');\n          const extractedAddress = extractAddress(detectedText);\n          setAddress(extractedAddress);\n          //setMemo(detectedText);\n        } else {\n          console.error('No text annotations found');\n        }\n      } catch (error) {\n        console.error('Failed to fetch text from image', error);\n      }\n    };\n  };\n  const extractAddress = text => {\n    // 문자열에서 '시', '구', '로', '길', '대로' 뒤에 공백이 없으면 추가해줍니다.\n    let modifiedText = text.replace(/(?:시|도|군|구|로|길|대로|층)(?!\\s)/g, '$& ');\n    setMemo(modifiedText);\n\n    // 수정된 문자열을 사용하여 정규 표현식으로 주소 패턴을 찾습니다.\n    const addressRegex = /(?:[\\w\\s]+(?:시|도|군|구)?\\s)?[\\w\\s]+(?:로|길|대로)\\s\\d+(?:-\\d+)?(?:번길)?(?:\\s\\d+(?:동|호))?/g;\n    const match = modifiedText.match(addressRegex);\n\n    // 찾은 주소를 반환합니다.\n    return match ? match[0].trim() : 'Address not found';\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log('Image:', image);\n    console.log('Name:', name);\n    console.log('Address:', address);\n    console.log('Latitude:', latitude);\n    console.log('Longitude:', longitude);\n    console.log('Memo:', memo);\n  };\n  const handleReset = () => {\n    setImage(null);\n    setPreview(null);\n    setName('');\n    setAddress('');\n    setLatitude('');\n    setLongitude('');\n    setMemo('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Image:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: handleImageChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), preview && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: preview,\n          alt: \"Preview\",\n          style: {\n            maxWidth: '200px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Address:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"address\",\n          value: address,\n          onChange: e => setAddress(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: name,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Latitude:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: latitude,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Longitude:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: longitude,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Memo:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: memo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: handleReset,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n}\n_s(Register, \"P+vRuk5h10WbnUf4wVUkc6S+iMw=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Register","_s","image","setImage","preview","setPreview","name","setName","address","setAddress","latitude","setLatitude","longitude","setLongitude","memo","setMemo","GOOGLE_CLOUD_VISION_API_KEY","GOOGLE_CLOUD_GEOCODING_API_KEY","script","document","createElement","src","async","body","appendChild","onload","geocoder","window","google","maps","Geocoder","addressInput","getElementById","addEventListener","geocode","value","results","status","lat","lng","geometry","location","toString","console","error","removeChild","handleImageChange","e","file","target","files","URL","createObjectURL","reader","FileReader","readAsDataURL","onloadend","base64String","result","split","requestPayload","requests","content","features","type","response","post","headers","data","responses","textAnnotations","detections","detectedText","map","annotation","description","join","extractedAddress","extractAddress","text","modifiedText","replace","addressRegex","match","trim","handleSubmit","event","preventDefault","log","handleReset","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onChange","alt","style","maxWidth","id","readOnly","onClick","_c","$RefreshReg$"],"sources":["/Users/kkddhh/Desktop/project/auto_flag/auto-flag-front/src/pages/Register.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction Register() {\n    const [image, setImage] = useState(null);\n    const [preview, setPreview] = useState(null);\n    const [name, setName] = useState('');\n    const [address, setAddress] = useState('');\n    const [latitude, setLatitude] = useState('');\n    const [longitude, setLongitude] = useState('');\n    const [memo, setMemo] = useState('');\n\n    const GOOGLE_CLOUD_VISION_API_KEY = 'AIzaSyA2bEOpkNhnfSIsYqVgFD0PNcRF6jFooAE'\n    const GOOGLE_CLOUD_GEOCODING_API_KEY = 'AIzaSyCLg__BpwjAl8zSJ741LouSvrwuUe__J-Q'\n\n    useEffect(() => {\n        const script = document.createElement('script');\n        script.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_CLOUD_GEOCODING_API_KEY}`;\n        script.async = true;\n        document.body.appendChild(script);\n\n        script.onload = () => {\n            const geocoder = new window.google.maps.Geocoder();\n            const addressInput = document.getElementById('address');\n            addressInput.addEventListener('change', () => {\n                geocoder.geocode({ address: addressInput.value }, (results, status) => {\n                    if (status === 'OK') {\n                        const { lat, lng } = results[0].geometry.location;\n                        setLatitude(lat().toString());\n                        setLongitude(lng().toString());\n                    } else {\n                        console.error('Geocode was not successful for the following reason: ' + status);\n                    }\n                });\n            });\n        };\n\n        return () => {\n            document.body.removeChild(script);\n        };\n    }, []);\n\n    const handleImageChange = async (e) => {\n        const file = e.target.files[0];\n        setImage(file);\n        setPreview(URL.createObjectURL(file));\n\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onloadend = async () => {\n            const base64String = reader.result.split(',')[1];\n\n            const requestPayload = {\n                requests: [\n                    {\n                        image: {\n                            content: base64String,\n                        },\n                        features: [\n                            {\n                                type: 'TEXT_DETECTION',\n                            },\n                        ],\n                    },\n                ],\n            };\n\n            try {\n                const response = await axios.post(\n                    `https://vision.googleapis.com/v1/images:annotate?key=${GOOGLE_CLOUD_VISION_API_KEY}`,\n                    requestPayload,\n                    {\n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                    }\n                );\n\n                if (response.data.responses[0].textAnnotations) {\n                    const detections = response.data.responses[0].textAnnotations;\n                    //const detectedText = detections[0] ? detections[0].description : 'No text detected';\n                    const detectedText = detections.map((annotation) => annotation.description).join('/');\n                    const extractedAddress = extractAddress(detectedText);\n                    setAddress(extractedAddress);\n                    //setMemo(detectedText);\n                } else {\n                    console.error('No text annotations found');\n                }\n            } catch (error) {\n                console.error('Failed to fetch text from image', error);\n            }\n        };\n    };\n\n    const extractAddress = (text) => {\n        // 문자열에서 '시', '구', '로', '길', '대로' 뒤에 공백이 없으면 추가해줍니다.\n        let modifiedText = text.replace(/(?:시|도|군|구|로|길|대로|층)(?!\\s)/g, '$& ');\n        setMemo(modifiedText);\n\n        // 수정된 문자열을 사용하여 정규 표현식으로 주소 패턴을 찾습니다.\n        const addressRegex = /(?:[\\w\\s]+(?:시|도|군|구)?\\s)?[\\w\\s]+(?:로|길|대로)\\s\\d+(?:-\\d+)?(?:번길)?(?:\\s\\d+(?:동|호))?/g;\n        const match = modifiedText.match(addressRegex);\n    \n        // 찾은 주소를 반환합니다.\n        return match ? match[0].trim() : 'Address not found';\n    };\n    \n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        console.log('Image:', image);\n        console.log('Name:', name);\n        console.log('Address:', address);\n        console.log('Latitude:', latitude);\n        console.log('Longitude:', longitude);\n        console.log('Memo:', memo)\n    };\n\n    const handleReset = () => {\n        setImage(null);\n        setPreview(null);\n        setName('');\n        setAddress('');\n        setLatitude('');\n        setLongitude('');\n        setMemo('');\n    };\n\n    return (\n        <div>\n            <h1>Register</h1>\n            <form onSubmit={handleSubmit}>\n                <label>\n                    Image:\n                    <input type=\"file\" onChange={handleImageChange} />\n                </label>\n                <br />\n                {preview && (\n                    <div>\n                        <img src={preview} alt=\"Preview\" style={{ maxWidth: '200px' }} />\n                    </div>\n                )}\n                <label>\n                    Address:\n                    <input type=\"text\" id=\"address\" value={address} onChange={(e) => setAddress(e.target.value)} />\n                </label>\n                <br />\n                <label>\n                    Name:\n                    <input type=\"text\" value={name} readOnly />\n                </label>\n                <br />\n                <label>\n                    Latitude:\n                    <input type=\"text\" value={latitude} readOnly />\n                </label>\n                <br />\n                <label>\n                    Longitude:\n                    <input type=\"text\" value={longitude} readOnly />\n                </label>\n                <br />\n                <label>\n                    Memo:\n                    <input type=\"text\" value={memo}></input>\n                </label>\n                <br />\n                <button type=\"submit\">Submit</button>\n                <button type=\"button\" onClick={handleReset}>Reset</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Register;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACmB,IAAI,EAAEC,OAAO,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMqB,2BAA2B,GAAG,yCAAyC;EAC7E,MAAMC,8BAA8B,GAAG,yCAAyC;EAEhFrB,SAAS,CAAC,MAAM;IACZ,MAAMsB,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC/CF,MAAM,CAACG,GAAG,GAAG,+CAA+CJ,8BAA8B,EAAE;IAC5FC,MAAM,CAACI,KAAK,GAAG,IAAI;IACnBH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,MAAM,CAAC;IAEjCA,MAAM,CAACO,MAAM,GAAG,MAAM;MAClB,MAAMC,QAAQ,GAAG,IAAIC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,QAAQ,CAAC,CAAC;MAClD,MAAMC,YAAY,GAAGZ,QAAQ,CAACa,cAAc,CAAC,SAAS,CAAC;MACvDD,YAAY,CAACE,gBAAgB,CAAC,QAAQ,EAAE,MAAM;QAC1CP,QAAQ,CAACQ,OAAO,CAAC;UAAE1B,OAAO,EAAEuB,YAAY,CAACI;QAAM,CAAC,EAAE,CAACC,OAAO,EAAEC,MAAM,KAAK;UACnE,IAAIA,MAAM,KAAK,IAAI,EAAE;YACjB,MAAM;cAAEC,GAAG;cAAEC;YAAI,CAAC,GAAGH,OAAO,CAAC,CAAC,CAAC,CAACI,QAAQ,CAACC,QAAQ;YACjD9B,WAAW,CAAC2B,GAAG,CAAC,CAAC,CAACI,QAAQ,CAAC,CAAC,CAAC;YAC7B7B,YAAY,CAAC0B,GAAG,CAAC,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC;UAClC,CAAC,MAAM;YACHC,OAAO,CAACC,KAAK,CAAC,uDAAuD,GAAGP,MAAM,CAAC;UACnF;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;IACN,CAAC;IAED,OAAO,MAAM;MACTlB,QAAQ,CAACI,IAAI,CAACsB,WAAW,CAAC3B,MAAM,CAAC;IACrC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM4B,iBAAiB,GAAG,MAAOC,CAAC,IAAK;IACnC,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC9B/C,QAAQ,CAAC6C,IAAI,CAAC;IACd3C,UAAU,CAAC8C,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC,CAAC;IAErC,MAAMK,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,aAAa,CAACP,IAAI,CAAC;IAC1BK,MAAM,CAACG,SAAS,GAAG,YAAY;MAC3B,MAAMC,YAAY,GAAGJ,MAAM,CAACK,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAEhD,MAAMC,cAAc,GAAG;QACnBC,QAAQ,EAAE,CACN;UACI3D,KAAK,EAAE;YACH4D,OAAO,EAAEL;UACb,CAAC;UACDM,QAAQ,EAAE,CACN;YACIC,IAAI,EAAE;UACV,CAAC;QAET,CAAC;MAET,CAAC;MAED,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMpE,KAAK,CAACqE,IAAI,CAC7B,wDAAwDlD,2BAA2B,EAAE,EACrF4C,cAAc,EACd;UACIO,OAAO,EAAE;YACL,cAAc,EAAE;UACpB;QACJ,CACJ,CAAC;QAED,IAAIF,QAAQ,CAACG,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC,CAACC,eAAe,EAAE;UAC5C,MAAMC,UAAU,GAAGN,QAAQ,CAACG,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC,CAACC,eAAe;UAC7D;UACA,MAAME,YAAY,GAAGD,UAAU,CAACE,GAAG,CAAEC,UAAU,IAAKA,UAAU,CAACC,WAAW,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;UACrF,MAAMC,gBAAgB,GAAGC,cAAc,CAACN,YAAY,CAAC;UACrD/D,UAAU,CAACoE,gBAAgB,CAAC;UAC5B;QACJ,CAAC,MAAM;UACHlC,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MAC3D;IACJ,CAAC;EACL,CAAC;EAED,MAAMkC,cAAc,GAAIC,IAAI,IAAK;IAC7B;IACA,IAAIC,YAAY,GAAGD,IAAI,CAACE,OAAO,CAAC,6BAA6B,EAAE,KAAK,CAAC;IACrElE,OAAO,CAACiE,YAAY,CAAC;;IAErB;IACA,MAAME,YAAY,GAAG,oFAAoF;IACzG,MAAMC,KAAK,GAAGH,YAAY,CAACG,KAAK,CAACD,YAAY,CAAC;;IAE9C;IACA,OAAOC,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,GAAG,mBAAmB;EACxD,CAAC;EAGD,MAAMC,YAAY,GAAIC,KAAK,IAAK;IAC5BA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB5C,OAAO,CAAC6C,GAAG,CAAC,QAAQ,EAAEtF,KAAK,CAAC;IAC5ByC,OAAO,CAAC6C,GAAG,CAAC,OAAO,EAAElF,IAAI,CAAC;IAC1BqC,OAAO,CAAC6C,GAAG,CAAC,UAAU,EAAEhF,OAAO,CAAC;IAChCmC,OAAO,CAAC6C,GAAG,CAAC,WAAW,EAAE9E,QAAQ,CAAC;IAClCiC,OAAO,CAAC6C,GAAG,CAAC,YAAY,EAAE5E,SAAS,CAAC;IACpC+B,OAAO,CAAC6C,GAAG,CAAC,OAAO,EAAE1E,IAAI,CAAC;EAC9B,CAAC;EAED,MAAM2E,WAAW,GAAGA,CAAA,KAAM;IACtBtF,QAAQ,CAAC,IAAI,CAAC;IACdE,UAAU,CAAC,IAAI,CAAC;IAChBE,OAAO,CAAC,EAAE,CAAC;IACXE,UAAU,CAAC,EAAE,CAAC;IACdE,WAAW,CAAC,EAAE,CAAC;IACfE,YAAY,CAAC,EAAE,CAAC;IAChBE,OAAO,CAAC,EAAE,CAAC;EACf,CAAC;EAED,oBACIhB,OAAA;IAAA2F,QAAA,gBACI3F,OAAA;MAAA2F,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjB/F,OAAA;MAAMgG,QAAQ,EAAEV,YAAa;MAAAK,QAAA,gBACzB3F,OAAA;QAAA2F,QAAA,GAAO,QAEH,eAAA3F,OAAA;UAAOiE,IAAI,EAAC,MAAM;UAACgC,QAAQ,EAAElD;QAAkB;UAAA6C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC,eACR/F,OAAA;QAAA4F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACL1F,OAAO,iBACJL,OAAA;QAAA2F,QAAA,eACI3F,OAAA;UAAKsB,GAAG,EAAEjB,OAAQ;UAAC6F,GAAG,EAAC,SAAS;UAACC,KAAK,EAAE;YAAEC,QAAQ,EAAE;UAAQ;QAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChE,CACR,eACD/F,OAAA;QAAA2F,QAAA,GAAO,UAEH,eAAA3F,OAAA;UAAOiE,IAAI,EAAC,MAAM;UAACoC,EAAE,EAAC,SAAS;UAACjE,KAAK,EAAE3B,OAAQ;UAACwF,QAAQ,EAAGjD,CAAC,IAAKtC,UAAU,CAACsC,CAAC,CAACE,MAAM,CAACd,KAAK;QAAE;UAAAwD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5F,CAAC,eACR/F,OAAA;QAAA4F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN/F,OAAA;QAAA2F,QAAA,GAAO,OAEH,eAAA3F,OAAA;UAAOiE,IAAI,EAAC,MAAM;UAAC7B,KAAK,EAAE7B,IAAK;UAAC+F,QAAQ;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC,eACR/F,OAAA;QAAA4F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN/F,OAAA;QAAA2F,QAAA,GAAO,WAEH,eAAA3F,OAAA;UAAOiE,IAAI,EAAC,MAAM;UAAC7B,KAAK,EAAEzB,QAAS;UAAC2F,QAAQ;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CAAC,eACR/F,OAAA;QAAA4F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN/F,OAAA;QAAA2F,QAAA,GAAO,YAEH,eAAA3F,OAAA;UAAOiE,IAAI,EAAC,MAAM;UAAC7B,KAAK,EAAEvB,SAAU;UAACyF,QAAQ;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC,eACR/F,OAAA;QAAA4F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN/F,OAAA;QAAA2F,QAAA,GAAO,OAEH,eAAA3F,OAAA;UAAOiE,IAAI,EAAC,MAAM;UAAC7B,KAAK,EAAErB;QAAK;UAAA6E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC,eACR/F,OAAA;QAAA4F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN/F,OAAA;QAAQiE,IAAI,EAAC,QAAQ;QAAA0B,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrC/F,OAAA;QAAQiE,IAAI,EAAC,QAAQ;QAACsC,OAAO,EAAEb,WAAY;QAAAC,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEd;AAAC7F,EAAA,CAzKQD,QAAQ;AAAAuG,EAAA,GAARvG,QAAQ;AA2KjB,eAAeA,QAAQ;AAAC,IAAAuG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}